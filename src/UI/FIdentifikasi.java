/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import com.sun.corba.se.impl.io.IIOPOutputStream;
import com.sun.corba.se.impl.io.OutputStreamHook;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.nio.file.Path;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.AbstractList;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.embed.swing.SwingFXUtils;
import javafx.stage.FileChooser;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import kelas.DBConfig;
import kelas.GLCMFeatureExtraction;

/**
 *
 * @author BURHAN NASIR RAUF
 */
public class FIdentifikasi extends javax.swing.JFrame {
    private FileChooser fileChooser;
    private File file;
    private String gambar;
    private Path copy,files;
    private Image image;
    private byte[] foto;
    Dimension dimensi;
    BufferedImage img;

    /**
     * Creates new form FSampel
     */
    public FIdentifikasi() {
        initComponents();
        tanggal();
        fileChooser = new FileChooser();
        fileChooser.getExtensionFilters().addAll(
        new FileChooser.ExtensionFilter("Image Files", "*.png","*.jpg","*jpeg","*.bmp")
    );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    int jmlData = 0;
    String[] kode;
    Double[] contrast;
    Double[] energy;
    Double[] homogeneity;
    Double[] entropy;
    Double[] dissimilarity;
    double[] hasil;
    double contrast1 = 0;
    double entropy1 = 0;
    double homogeneity1 = 0;
    double energy1 = 0;
    double dissimilarity1 = 0;
    List<String> listKode;
    List<Double> listConstrast;
    List<Double> listHomogeneity;
    List<Double> listEntropy;
    List<Double> listEnergy;
    List<Double> listDissimilarity;
    String[] hGrade;
    int[] hNilai = null;
    String dapat = "";
    FileInputStream fileInputStream = null;
        
    private void tanggal(){
        Date tgl = new Date();
        SimpleDateFormat df = new SimpleDateFormat("d MMMM yyyy");
        txt_tanggal.setText(df.format(tgl));
    }
    
    private void knn() {
        try {
            String sql = "SELECT COUNT(kd_sampel) AS jml FROM sampel";
            Connection cn = DBConfig.getKoneksi();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if (rs.next()) {
                jmlData = Integer.parseInt(rs.getString("jml"));
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(FIdentifikasi.class.getName()).log(Level.SEVERE, null, ex);
        }

        listKode = new ArrayList<>();
        listConstrast = new ArrayList<>();
        listDissimilarity = new ArrayList<>();
        listEnergy = new ArrayList<>();
        listEntropy = new ArrayList<>();
        listHomogeneity = new ArrayList<>();
        listKode = dataKode();
        listConstrast = dataConstrast();
        listDissimilarity = dataDissimilarity();
        listEnergy = dataEnergy();
        listEntropy = dataEntropy();
        listHomogeneity = dataHomogeneity();
        kode = new String[listKode.size()];
        contrast = new Double[listConstrast.size()];
        energy = new Double[listEnergy.size()];
        homogeneity = new Double[listHomogeneity.size()];
        entropy = new Double[listEntropy.size()];
        dissimilarity = new Double[listDissimilarity.size()];
        hasil = new double[jmlData];
        listKode.toArray(kode);
        listConstrast.toArray(contrast);
        listDissimilarity.toArray(dissimilarity);
        listEnergy.toArray(energy);
        listEntropy.toArray(entropy);
        listHomogeneity.toArray(homogeneity);
        contrast1 = Double.parseDouble(mean_contrast.getText());
        entropy1 = Double.parseDouble(mean_entropy.getText());
        homogeneity1 = Double.parseDouble(mean_homogenity.getText());
        energy1 = Double.parseDouble(mean_energy.getText());
        dissimilarity1 = Double.parseDouble(mean_dissimilarity.getText());
        
        //Perhitungan KNN
        for (int i=0; i<jmlData; i++){
            hasil[i] = 0;
            double kuadratContrast = (contrast1 - contrast[i]) * (contrast1 - contrast[i]);
            double kuadratEntropy = (entropy1 - entropy[i]) * (entropy1 - entropy[i]);
            double kuadratEnergy = (energy1 - energy[i]) * (energy1 - energy[i]);
            double kuadratHomogeneity= (homogeneity1 - homogeneity[i]) * (homogeneity1 - homogeneity[i]);
            double kuadratDissimilarity = (dissimilarity1 - dissimilarity[i]) * (dissimilarity1 - dissimilarity[i]);
            hasil[i] = hasil[i] + (kuadratContrast + kuadratEnergy + kuadratEntropy + kuadratHomogeneity + kuadratDissimilarity);
            hasil[i] = Math.sqrt(hasil[i]);
        }
        
        //Hasil
        String[] hasilKode = new String[hasil.length];
        double[] hasilNilai = new double[hasil.length];
        for (int i=0; i<hasil.length; i++){
            hasilNilai[i] = hasil[i];
            hasilKode[i] = kode[i];
        }
        for (int i=0; i<hasil.length; i++){
            for (int j=i; j<hasil.length; j++){
                if (hasilNilai[j] > hasilNilai[i]){
                    double tmpNilai = hasilNilai[i];
                    String tmpKode = hasilKode[i];
                    hasilNilai[i] = hasilNilai[j];
                    hasilKode[i] = hasilKode[j];
                    hasilNilai[j] = tmpNilai;
                    hasilKode[j] = tmpKode;
                }
            }
        }
        
        //Input nilai k
        int k = 10;
        String[] kodeSampel = new String[k];
        double[] nilaiSampel = new double[k];
        for (int i=0; i<k; i++){
            kodeSampel[i] = hasilKode[i];
            nilaiSampel[i] = hasilNilai[i];
        }
        
        //Menentukan Grade
        String[] hasilGrade = new String[k];
        for (int i=0; i<k; i++){
            try {
                String sql = "SELECT * FROM sampel WHERE kd_sampel='"+kodeSampel[i]+"'";
                Connection cn = DBConfig.getKoneksi();
                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(sql);
                if (rs.next()){
                    hasilGrade[i] = rs.getString("grade").toString();
                }
            } catch (SQLException ex) {
                Logger.getLogger(FIdentifikasi.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
            
        double[] fn = new double[4];
        List<String> dataGrade = new ArrayList<String>(Arrays.asList(hasilGrade));
        int gradeA = Collections.frequency(dataGrade, "A");
        int gradeB = Collections.frequency(dataGrade, "B");
        int gradeC = Collections.frequency(dataGrade, "C");
        int gradeD = Collections.frequency(dataGrade, "D");
        List<Integer> dGrade = new ArrayList<Integer>();
        dGrade.add(gradeA);
        dGrade.add(gradeB);
        dGrade.add(gradeC);
        dGrade.add(gradeD);
        
        for (int i=0; i<dGrade.size(); i++){
            fn[i] = dGrade.get(i);
        }
        
        List<Double> gA = new ArrayList<>();
        List<Double> gB = new ArrayList<>();
        List<Double> gC = new ArrayList<>();
        List<Double> gD = new ArrayList<>();
        double[] nZZ = new double[dGrade.size()];
        
        for (int i=0; i<k; i++){
            if (hasilGrade[i].equals("A")){
                gA.add(nilaiSampel[i]);
                
            } else
            if (hasilGrade[i].equals("B")){
                gB.add(nilaiSampel[i]);
                
            } else
            if (hasilGrade[i].equals("C")){
                gC.add(nilaiSampel[i]);
                
            } else
            if (hasilGrade[i].equals("D")){
                gD.add(nilaiSampel[i]);
                
            }
        }
        if (gA.size() == 0){
            nZZ[0] = 0;
        } else {
            nZZ[0] = gA.get(0);
        }
        
        if (gB.size() == 0){
            nZZ[1] = 0;
        } else {
            nZZ[1] = gB.get(0);
        }
        
        if (gC.size() == 0){
            nZZ[2] = 0;
        } else {
            nZZ[2] = gC.get(0);
        }
        
        if (gD.size() == 0){
            nZZ[3] = 0;
        } else {
            nZZ[3] = gD.get(0);
        }
        
        String[] ca = {"A", "B", "C", "D"};
        int[] zz = new int[dGrade.size()];
        String teks = "";
        for (int i=0; i<ca.length; i++){
             zz[i] = (int) ((fn[i] / k) * 100);
            // teks += ca[i] +" : "+ zz[i] + "%"+"\n";
        }
        
        int[] mass = new int[nZZ.length];
        for (int i=0; i<nZZ.length; i++){
            if (nZZ[i] >= 1){
                mass[i] = 1;
            } else {
                mass[i] = 0;
            }
            //JOptionPane.showMessageDialog(null, nZZ[i]);
        }
        int sum = 0;
        for (int num : mass) {
            sum = sum+num;
        }
        
        hGrade = new String[ca.length];
        hNilai = new int[zz.length];
        double[] hHasil = new double[nZZ.length];
        for (int i=0; i<ca.length; i++){
            hNilai[i] = zz[i];
            hGrade[i] = ca[i];
            hHasil[i] = zz[i] + nZZ[i];
        }
        for (int i=0; i<ca.length; i++){
            for (int j=i; j<zz.length; j++){
                if (hHasil[j] > hHasil[i]){
                    int tmpNilai = hNilai[i];
                    double tmpHasil = hHasil[i];
                    String tmpGrade = hGrade[i];
                    hNilai[i] = hNilai[j];
                    hGrade[i] = hGrade[j];
                    hHasil[i] = hHasil[j];
                    hNilai[j] = tmpNilai;
                    hGrade[j] = tmpGrade;
                    hHasil[j] = tmpHasil;
                }
            }
        }
        
        String teks1 = "";
        
        if (sum > 1){
            teks1 += "Gambar tidak dapat diproses"+"\n\n";
            teks1 += "Silahkan pilih gambar lain!";
            txt_grade.setText(teks1);
        } else {
            teks += hNilai[0] + "% Grade "+hGrade[0]+"\n\n";
            if (hNilai[0] >= 50){
                teks += "Layak Ekspor";
                dapat = "Layak Ekspor"; 
            } else {
                dapat = "Tidak Layak Ekspor";
                teks += "Tidak Layak Ekspor";
            }
            txt_grade.setText(teks);
        }
    }
    
    private void mati(){
        panelGambar4.setImage(null);
        panelGambar5.setImage(null);
        txt_namafile.setText("");
        txt_kode.setText("");
        btn_simpan.setEnabled(false);
        n_contrast0.setText("");
        n_contrast135.setText("");
        n_contrast45.setText("");
        n_contrast90.setText("");
        n_dissimilarity0.setText("");
        n_dissimilarity135.setText("");
        n_dissimilarity45.setText("");
        n_dissimilarity90.setText("");
        n_energy0.setText("");
        n_energy135.setText("");
        n_energy45.setText("");
        n_energy90.setText("");
        n_entropy0.setText("");
        txt_grade.setText("");
        n_entropy135.setText("");
        n_entropy45.setText("");
        n_entropy90.setText("");
        n_homogenity0.setText("");
        n_homogenity135.setText("");
        n_homogenity45.setText("");
        n_homogenity90.setText("");
        mean_contrast.setText("");
        mean_dissimilarity.setText("");
        mean_energy.setText("");
        mean_homogenity.setText("");
        mean_entropy.setText("");
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_simpan = new javax.swing.JButton();
        txt_namafile = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        panelGambar4 = new UI.PanelGambar();
        panelGambar5 = new UI.PanelGambar();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        n_contrast0 = new javax.swing.JTextField();
        n_homogenity0 = new javax.swing.JTextField();
        n_entropy0 = new javax.swing.JTextField();
        n_energy0 = new javax.swing.JTextField();
        n_dissimilarity0 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        n_contrast45 = new javax.swing.JTextField();
        n_homogenity45 = new javax.swing.JTextField();
        n_entropy45 = new javax.swing.JTextField();
        n_energy45 = new javax.swing.JTextField();
        n_dissimilarity45 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        n_contrast90 = new javax.swing.JTextField();
        n_homogenity90 = new javax.swing.JTextField();
        n_entropy90 = new javax.swing.JTextField();
        n_energy90 = new javax.swing.JTextField();
        n_dissimilarity90 = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        n_dissimilarity135 = new javax.swing.JTextField();
        n_contrast135 = new javax.swing.JTextField();
        n_homogenity135 = new javax.swing.JTextField();
        n_entropy135 = new javax.swing.JTextField();
        n_energy135 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        mean_contrast = new javax.swing.JTextField();
        mean_homogenity = new javax.swing.JTextField();
        mean_entropy = new javax.swing.JTextField();
        mean_energy = new javax.swing.JTextField();
        mean_dissimilarity = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        txt_tanggal = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txt_kode = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_grade = new javax.swing.JTextPane();
        statusbar = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sampel Objek");
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(1366, 768));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_simpan.setText("SIMPAN");
        btn_simpan.setEnabled(false);
        btn_simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_simpanActionPerformed(evt);
            }
        });
        getContentPane().add(btn_simpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 420, 100, 30));

        txt_namafile.setEditable(false);
        getContentPane().add(txt_namafile, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 420, 640, 30));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Gambar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(51, 255, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Grayscale");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(544, 19, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("RGB");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 19, -1, -1));

        panelGambar4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        panelGambar4.setPreferredSize(new java.awt.Dimension(350, 250));

        javax.swing.GroupLayout panelGambar4Layout = new javax.swing.GroupLayout(panelGambar4);
        panelGambar4.setLayout(panelGambar4Layout);
        panelGambar4Layout.setHorizontalGroup(
            panelGambar4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 348, Short.MAX_VALUE)
        );
        panelGambar4Layout.setVerticalGroup(
            panelGambar4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 248, Short.MAX_VALUE)
        );

        jPanel1.add(panelGambar4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        panelGambar5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        panelGambar5.setPreferredSize(new java.awt.Dimension(350, 250));

        javax.swing.GroupLayout panelGambar5Layout = new javax.swing.GroupLayout(panelGambar5);
        panelGambar5.setLayout(panelGambar5Layout);
        panelGambar5Layout.setHorizontalGroup(
            panelGambar5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 348, Short.MAX_VALUE)
        );
        panelGambar5Layout.setVerticalGroup(
            panelGambar5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 248, Short.MAX_VALUE)
        );

        jPanel1.add(panelGambar5, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 40, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 760, 310));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nilai GLCM", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("Dissimilarity");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 170, 30));

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("Contrast");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 170, 30));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("Homogeneity");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 170, 30));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("Entropy");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 170, 30));

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel12.setText("Energy");
        jPanel3.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 170, 30));

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 190, 210));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        n_contrast0.setEditable(false);
        n_contrast0.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel4.add(n_contrast0, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 170, 30));

        n_homogenity0.setEditable(false);
        n_homogenity0.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel4.add(n_homogenity0, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 170, 30));

        n_entropy0.setEditable(false);
        n_entropy0.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel4.add(n_entropy0, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 170, 30));

        n_energy0.setEditable(false);
        n_energy0.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel4.add(n_energy0, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 170, 30));

        n_dissimilarity0.setEditable(false);
        n_dissimilarity0.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel4.add(n_dissimilarity0, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 170, 30));

        jPanel2.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 50, 190, 210));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        n_contrast45.setEditable(false);
        n_contrast45.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel5.add(n_contrast45, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 170, 30));

        n_homogenity45.setEditable(false);
        n_homogenity45.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel5.add(n_homogenity45, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 170, 30));

        n_entropy45.setEditable(false);
        n_entropy45.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel5.add(n_entropy45, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 170, 30));

        n_energy45.setEditable(false);
        n_energy45.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel5.add(n_energy45, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 170, 30));

        n_dissimilarity45.setEditable(false);
        n_dissimilarity45.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel5.add(n_dissimilarity45, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 170, 30));

        jPanel2.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 50, 190, 210));

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        n_contrast90.setEditable(false);
        n_contrast90.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel6.add(n_contrast90, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 170, 30));

        n_homogenity90.setEditable(false);
        n_homogenity90.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel6.add(n_homogenity90, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 170, 30));

        n_entropy90.setEditable(false);
        n_entropy90.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel6.add(n_entropy90, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 170, 30));

        n_energy90.setEditable(false);
        n_energy90.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel6.add(n_energy90, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 170, 30));

        n_dissimilarity90.setEditable(false);
        n_dissimilarity90.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel6.add(n_dissimilarity90, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 170, 30));

        jPanel2.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 50, 190, 210));

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        n_dissimilarity135.setEditable(false);
        n_dissimilarity135.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel7.add(n_dissimilarity135, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 170, 30));

        n_contrast135.setEditable(false);
        n_contrast135.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel7.add(n_contrast135, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 170, 30));

        n_homogenity135.setEditable(false);
        n_homogenity135.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel7.add(n_homogenity135, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 170, 30));

        n_entropy135.setEditable(false);
        n_entropy135.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel7.add(n_entropy135, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 170, 30));

        n_energy135.setEditable(false);
        n_energy135.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel7.add(n_energy135, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 170, 30));

        jPanel2.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 50, 190, 210));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Mean");
        jLabel3.setToolTipText("");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 30, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Feature");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("0°");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 30, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("45°");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(565, 30, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("90°");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(765, 30, -1, -1));

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mean_contrast.setEditable(false);
        mean_contrast.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel9.add(mean_contrast, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 170, 30));

        mean_homogenity.setEditable(false);
        mean_homogenity.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel9.add(mean_homogenity, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 170, 30));

        mean_entropy.setEditable(false);
        mean_entropy.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel9.add(mean_entropy, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 170, 30));

        mean_energy.setEditable(false);
        mean_energy.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel9.add(mean_energy, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 170, 30));

        mean_dissimilarity.setEditable(false);
        mean_dissimilarity.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jPanel9.add(mean_dissimilarity, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 170, 30));

        jPanel2.add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 50, 190, 210));

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel23.setText("135°");
        jPanel2.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 30, -1, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 470, 1300, 280));

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Identitas", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N
        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Keterangan :");
        jPanel8.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, -1, -1));

        txt_tanggal.setEditable(false);
        txt_tanggal.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txt_tanggal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_tanggal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_tanggalActionPerformed(evt);
            }
        });
        jPanel8.add(txt_tanggal, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 35, 170, 30));

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Tanggal :");
        jPanel8.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setText("Kode :");
        jPanel8.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 95, -1, -1));

        txt_kode.setEditable(false);
        txt_kode.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txt_kode.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txt_kode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_kodeActionPerformed(evt);
            }
        });
        jPanel8.add(txt_kode, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 90, 170, 30));

        jScrollPane1.setEnabled(false);

        txt_grade.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jScrollPane1.setViewportView(txt_grade);

        jPanel8.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 150, 170, 140));

        getContentPane().add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 80, 360, 310));

        statusbar.setBackground(new java.awt.Color(0, 138, 138));
        statusbar.setForeground(new java.awt.Color(0, 138, 138));
        statusbar.setPreferredSize(new java.awt.Dimension(1366, 29));
        statusbar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gambar/minimize.jpg"))); // NOI18N
        jButton4.setAlignmentY(1.0F);
        jButton4.setMargin(new java.awt.Insets(2, 13, 2, 15));
        jButton4.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        statusbar.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1308, 2, -1, -1));

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gambar/close.png"))); // NOI18N
        jButton5.setAlignmentY(1.0F);
        jButton5.setMargin(new java.awt.Insets(2, 13, 2, 15));
        jButton5.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        statusbar.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(1338, 2, -1, -1));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Halaman Identifikasi Objek");
        statusbar.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 0, 280, 29));

        getContentPane().add(statusbar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jButton2.setText("Pilih File");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 420, 100, 30));

        jButton3.setText("RESET");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 420, 100, 30));

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gambar/unnamed.jpg"))); // NOI18N
        getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 770));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int pilih = JOptionPane.showConfirmDialog(null, "Ingin mengulang data ?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (pilih == JOptionPane.YES_OPTION) {
            mati();
            tanggal();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser(System.getProperty("user.home"));
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setFileFilter(new FileNameExtensionFilter("jpg|bmp", "jpg","bmp"));

        if(chooser.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File file=chooser.getSelectedFile();
            try {
                fileInputStream = new FileInputStream(file);
                image = ImageIO.read(file);
                panelGambar4.setImage(image);
                dimensi = new Dimension();
                dimensi.width = image.getWidth(null)/4;
                dimensi.height = image.getHeight(null)/4;
                // panelGambar4.setPreferredSize(dimensi);
                // panelGambar5.setPreferredSize(dimensi);
                img = ImageIO.read(file);
                Graphics gg = img.getGraphics();
                gg.drawImage(img, 0, 0, null);
                for (int i = 0; i < img.getWidth(); i++) {
                    for (int j = 0; j < img.getHeight(); j++) {
                        int rgb = img.getRGB(i, j);
                        int newR = (rgb>>16)>>0xFF;
                        int newG = (rgb>>8)&0xFF;
                        int newB = (rgb>>0)&0xFF;
                        int newA = (rgb<<24)&0xFF;
                        int gr = (newR + newG + newB) / 3;
                        int gray = newA|gr<<16|gr<<8|gr;
                        img.setRGB(i, j, gray);
                    }
                }
                panelGambar5.setImage(img);
                
                if(!txt_namafile.getText().equals("")){
                    ObjectOutputStream objectOutputStream = null;
                    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                    objectOutputStream = new ObjectOutputStream(outputStream);
                    ImageIcon icon = new ImageIcon(img);
                    objectOutputStream.writeObject(icon);
                    objectOutputStream.flush();
                    objectOutputStream.close();
                    this.setFoto(outputStream.toByteArray());
                }
            } catch (IOException ex) {
                Logger.getLogger(FIdentifikasi.class.getName()).log(Level.SEVERE, null, ex);
            }
            txt_namafile.setText(file.getAbsolutePath());
            try {
                GLCMFeatureExtraction glcmfe = new GLCMFeatureExtraction(new File(file.getPath()), 15);
                glcmfe.extract();
                
                n_contrast0.setText(""+glcmfe.getContrast0());
                n_homogenity0.setText(""+glcmfe.getHomogenity0());
                n_entropy0.setText(""+glcmfe.getEntropy0());
                n_energy0.setText(""+glcmfe.getEnergy0());
                n_dissimilarity0.setText(""+glcmfe.getDissimilarity0());

                n_contrast45.setText(""+glcmfe.getContrast45());
                n_homogenity45.setText(""+glcmfe.getHomogenity45());
                n_entropy45.setText(""+glcmfe.getEntropy45());
                n_energy45.setText(""+glcmfe.getEnergy45());
                n_dissimilarity45.setText(""+glcmfe.getDissimilarity45());

                n_contrast90.setText(""+glcmfe.getContrast90());
                n_homogenity90.setText(""+glcmfe.getHomogenity90());
                n_entropy90.setText(""+glcmfe.getEntropy90());
                n_energy90.setText(""+glcmfe.getEnergy90());
                n_dissimilarity90.setText(""+glcmfe.getDissimilarity90());

                n_contrast135.setText(""+glcmfe.getContrast135());
                n_homogenity135.setText(""+glcmfe.getHomogenity135());
                n_entropy135.setText(""+glcmfe.getEntropy135());
                n_energy135.setText(""+glcmfe.getEnergy135());
                n_dissimilarity135.setText(""+glcmfe.getDissimilarity135());
                
                mean_contrast.setText(""+glcmfe.getContrast());
                mean_dissimilarity.setText(""+glcmfe.getDissimilarity());
                mean_energy.setText(""+glcmfe.getEnergy());
                mean_entropy.setText(""+glcmfe.getEntropy());
                mean_homogenity.setText(""+glcmfe.getHomogenity());
            } catch (IOException ex) {
                Logger.getLogger(FIdentifikasi.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (txt_namafile.getText().isEmpty()){

            } else {
                kode();
                knn();
                btn_simpan.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txt_kodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_kodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_kodeActionPerformed

    private void txt_tanggalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_tanggalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_tanggalActionPerformed

    private void btn_simpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_simpanActionPerformed
        if (btn_simpan.isEnabled()){
            String tanggal = "";
            Date tgl = new Date();
            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            tanggal = df.format(tgl);
            if (txt_namafile.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Pilih file gambar terlebih dahulu");
            } else {
                try {
                    Connection cn = DBConfig.getKoneksi();
                    PreparedStatement st = (PreparedStatement) cn.prepareStatement("INSERT INTO identifikasi(kd_tuna, grade, foto, tanggal, persentasi, ket) values ('"+txt_kode.getText()+"', ?, ?, ?, ?, ?)");
                    st.setString(1, hGrade[0]);
                    st.setBlob(2, fileInputStream);
                    st.setString(3, tanggal);
                    st.setString(4, String.valueOf(hNilai[0]));
                    st.setString(5, dapat);
                     st.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Data berhasil disimpan");
                    tanggal();
                    mati();
                } catch (SQLException ex) {
                    Logger.getLogger(FIdentifikasi.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_btn_simpanActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setState(FIdentifikasi.ICONIFIED);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int pilih = JOptionPane.showConfirmDialog(null, "Ingin kembali ke halaman utama ?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (pilih == JOptionPane.YES_OPTION) {
            FUtamaNelayan n = new FUtamaNelayan();
            n.show();
            this.dispose();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void setFoto(byte[] foto){
        this.foto = foto;
    }
    
    private byte[] getFoto(){
        return foto;
    }
    
    private void kode() {
        String tanggal = "";
        Date tgl = new Date();
        SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");
        tanggal = df.format(tgl);
        try {
            String sql = "SELECT * FROM identifikasi ORDER BY kd_tuna DESC";
            Connection cn = DBConfig.getKoneksi();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if (rs.next()) {
                int a = Integer.parseInt(rs.getString("kd_tuna").substring(8));
                int kode = a+1;
                txt_kode.setText(tanggal+kode);
            } else
            {
                txt_kode.setText(tanggal+"10001");
            }
        } catch (SQLException ex) {
            Logger.getLogger(FIdentifikasi.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public List<String> dataKode() {
        List<String> listData = new ArrayList<String>();
        try {
            String sql = "SELECT * FROM sampel";
            Connection cn = DBConfig.getKoneksi();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if (rs.first()) {
                do {
                    listData.add(rs.getString("kd_sampel"));
                } while (rs.next());
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(FIdentifikasi.class.getName()).log(Level.SEVERE, null, ex);
        }
        return listData;
    }
    
    public List<Double> dataConstrast() {
        List<Double> listData = new ArrayList<Double>();
        try {
            String sql = "SELECT * FROM sampel";
            Connection cn = DBConfig.getKoneksi();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if (rs.first()) {
                do {
                    listData.add(Double.parseDouble(rs.getString("contrast")));
                } while (rs.next());
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(FIdentifikasi.class.getName()).log(Level.SEVERE, null, ex);
        }
        return listData;
    }
    
    public List<Double> dataHomogeneity() {
        List<Double> listData = new ArrayList<Double>();
        try {
            String sql = "SELECT * FROM sampel";
            Connection cn = DBConfig.getKoneksi();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if (rs.first()) {
                do {
                    listData.add(Double.parseDouble(rs.getString("homogeneity")));
                } while (rs.next());
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(FIdentifikasi.class.getName()).log(Level.SEVERE, null, ex);
        }
        return listData;
    }
    
    public List<Double> dataDissimilarity() {
        List<Double> listData = new ArrayList<Double>();
        try {
            String sql = "SELECT * FROM sampel";
            Connection cn = DBConfig.getKoneksi();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if (rs.first()) {
                do {
                    listData.add(Double.parseDouble(rs.getString("dissimilarity")));
                } while (rs.next());
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(FIdentifikasi.class.getName()).log(Level.SEVERE, null, ex);
        }
        return listData;
    }
    
    public List<Double> dataEntropy() {
        List<Double> listData = new ArrayList<Double>();
        try {
            String sql = "SELECT * FROM sampel";
            Connection cn = DBConfig.getKoneksi();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if (rs.first()) {
                do {
                    listData.add(Double.parseDouble(rs.getString("entropy")));
                } while (rs.next());
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(FIdentifikasi.class.getName()).log(Level.SEVERE, null, ex);
        }
        return listData;
    }
    
    public List<Double> dataEnergy() {
        List<Double> listData = new ArrayList<Double>();
        try {
            String sql = "SELECT * FROM sampel";
            Connection cn = DBConfig.getKoneksi();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if (rs.first()) {
                do {
                    listData.add(Double.parseDouble(rs.getString("energy")));
                } while (rs.next());
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(FIdentifikasi.class.getName()).log(Level.SEVERE, null, ex);
        }
        return listData;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FIdentifikasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FIdentifikasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FIdentifikasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FIdentifikasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FIdentifikasi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_simpan;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField mean_contrast;
    private javax.swing.JTextField mean_dissimilarity;
    private javax.swing.JTextField mean_energy;
    private javax.swing.JTextField mean_entropy;
    private javax.swing.JTextField mean_homogenity;
    private javax.swing.JTextField n_contrast0;
    private javax.swing.JTextField n_contrast135;
    private javax.swing.JTextField n_contrast45;
    private javax.swing.JTextField n_contrast90;
    private javax.swing.JTextField n_dissimilarity0;
    private javax.swing.JTextField n_dissimilarity135;
    private javax.swing.JTextField n_dissimilarity45;
    private javax.swing.JTextField n_dissimilarity90;
    private javax.swing.JTextField n_energy0;
    private javax.swing.JTextField n_energy135;
    private javax.swing.JTextField n_energy45;
    private javax.swing.JTextField n_energy90;
    private javax.swing.JTextField n_entropy0;
    private javax.swing.JTextField n_entropy135;
    private javax.swing.JTextField n_entropy45;
    private javax.swing.JTextField n_entropy90;
    private javax.swing.JTextField n_homogenity0;
    private javax.swing.JTextField n_homogenity135;
    private javax.swing.JTextField n_homogenity45;
    private javax.swing.JTextField n_homogenity90;
    private UI.PanelGambar panelGambar4;
    private UI.PanelGambar panelGambar5;
    private javax.swing.JPanel statusbar;
    private javax.swing.JTextPane txt_grade;
    private javax.swing.JTextField txt_kode;
    private javax.swing.JTextField txt_namafile;
    private javax.swing.JTextField txt_tanggal;
    // End of variables declaration//GEN-END:variables
}
